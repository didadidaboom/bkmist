# Generated by Django 3.2.9 on 2021-11-30 19:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Moment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=255, verbose_name='瞬间内容')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='瞬间发布的位置')),
                ('name', models.CharField(max_length=255, verbose_name='随机名字')),
                ('avatar', models.CharField(max_length=255, verbose_name='随机头像')),
                ('favor_count', models.PositiveIntegerField(default=0, verbose_name='点赞数')),
                ('viewer_count', models.PositiveIntegerField(default=0, verbose_name='浏览量')),
                ('comment_count', models.PositiveIntegerField(default=0, verbose_name='评论量')),
                ('share_count', models.PositiveIntegerField(default=0, verbose_name='分享量')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='瞬间发布日期')),
                ('moment_status', models.SmallIntegerField(choices=[(0, '显示'), (1, '条件隐身')], default=0, verbose_name='显示状态')),
                ('control_status', models.SmallIntegerField(choices=[(0, '个人可见'), (1, '广场可见')], default=0, verbose_name='控制状态')),
            ],
            options={
                'verbose_name': '瞬间',
                'verbose_name_plural': '瞬间',
                'db_table': 'moment',
            },
        ),
        migrations.CreateModel(
            name='TopicInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='提示文本:账号不能为空！', max_length=100, unique=True, verbose_name='话题名')),
                ('description', models.CharField(max_length=255, verbose_name='描述')),
                ('focus_count', models.PositiveIntegerField(default=0, verbose_name='话题关注次数')),
                ('viewer_count', models.PositiveIntegerField(default=0, verbose_name='话题浏览次数')),
                ('cited_count', models.PositiveIntegerField(default=0, verbose_name='话题引用次数')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='话题创建时间')),
            ],
            options={
                'verbose_name': '话题',
                'verbose_name_plural': '话题',
                'db_table': 'topicInfo',
            },
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickName', models.CharField(max_length=255, verbose_name='用户昵称')),
                ('avatarUrl', models.CharField(max_length=255, verbose_name='用户头像')),
                ('openID', models.CharField(max_length=255, unique=True, verbose_name='openID')),
                ('phone', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号')),
                ('token', models.CharField(blank=True, max_length=64, null=True, verbose_name='用户TOKEN')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='用户注册时间')),
            ],
            options={
                'verbose_name': '话题',
                'verbose_name_plural': '话题',
                'db_table': 'userInfo',
            },
        ),
        migrations.CreateModel(
            name='UserViewerRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='用户浏览的时间')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_viewer', to='api.userinfo', verbose_name='被浏览的用户')),
                ('viewer_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='viewer_user_viewer', to='api.userinfo', verbose_name='浏览的用户')),
            ],
            options={
                'verbose_name': '用户浏览记录',
                'verbose_name_plural': '用户浏览记录',
                'db_table': 'user_viewer_record',
            },
        ),
        migrations.CreateModel(
            name='UserFocusRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='用户被关在的时间')),
                ('focus_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='focus_user_focus', to='api.userinfo', verbose_name='关注的用户')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_focus', to='api.userinfo', verbose_name='被关注的用户')),
            ],
            options={
                'verbose_name': '用户关注记录',
                'verbose_name_plural': '用户关注记录',
                'db_table': 'user_focus_record',
            },
        ),
        migrations.CreateModel(
            name='UserBlacklistRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='用户拉黑的时间')),
                ('reject_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reject_user_blacklist', to='api.userinfo', verbose_name='拉黑的用户')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_blacklist', to='api.userinfo', verbose_name='被拉黑的用户')),
            ],
            options={
                'verbose_name': '用户拉黑记录',
                'verbose_name_plural': '用户拉黑记录',
                'db_table': 'user_blacklist_record',
            },
        ),
        migrations.CreateModel(
            name='TopicViewerRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='话题浏览的时间')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.topicinfo', verbose_name='话题')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userinfo', verbose_name='用户')),
            ],
            options={
                'verbose_name': '话题浏览记录',
                'verbose_name_plural': '话题浏览记录',
                'db_table': 'topic_viewer_record',
            },
        ),
        migrations.AddField(
            model_name='topicinfo',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userinfo', verbose_name='话题创建用户'),
        ),
        migrations.CreateModel(
            name='TopicFocusRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='话题浏览的时间')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.topicinfo', verbose_name='话题')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userinfo', verbose_name='用户')),
            ],
            options={
                'verbose_name': '话题关注记录',
                'verbose_name_plural': '话题关注记录',
                'db_table': 'topic_focus_record',
            },
        ),
        migrations.CreateModel(
            name='TopicCitedRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='话题应用的时间')),
                ('moment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.moment', verbose_name='瞬间')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.topicinfo', verbose_name='话题')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.userinfo', verbose_name='用户')),
            ],
            options={
                'verbose_name': '话题引用记录',
                'verbose_name_plural': '话题引用记录',
                'db_table': 'topic_cited_record',
            },
        ),
        migrations.CreateModel(
            name='MomentViewerRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='浏览日期')),
                ('moment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.moment', verbose_name='浏览的瞬间')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userinfo', verbose_name='浏览用户')),
            ],
            options={
                'verbose_name': '瞬间浏览记录',
                'verbose_name_plural': '瞬间浏览记录',
                'db_table': 'moment_viewer_record',
            },
        ),
        migrations.CreateModel(
            name='MomentShareRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='瞬间喜欢时间')),
                ('moment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.moment', verbose_name='被分享的瞬间')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userinfo', verbose_name='分享瞬间的用户')),
            ],
            options={
                'verbose_name': '瞬间分享记录',
                'verbose_name_plural': '瞬间分享记录',
                'db_table': 'moment_share_record',
            },
        ),
        migrations.CreateModel(
            name='MomentFavorRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='瞬间喜欢时间')),
                ('moment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.moment', verbose_name='被喜欢的瞬间')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userinfo', verbose_name='喜欢瞬间的用户')),
            ],
            options={
                'verbose_name': '瞬间喜欢记录',
                'verbose_name_plural': '瞬间喜欢记录',
                'db_table': 'moment_favor_record',
            },
        ),
        migrations.CreateModel(
            name='MomentDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(blank=True, max_length=1000, null=True, verbose_name='URL地址')),
                ('path_key', models.CharField(blank=True, max_length=1000, null=True, verbose_name='图片名')),
                ('moment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moment_detail', to='api.moment', verbose_name='瞬间的ID')),
            ],
            options={
                'verbose_name': '瞬间图片',
                'verbose_name_plural': '瞬间图片',
                'db_table': 'moment_detail',
            },
        ),
        migrations.AddField(
            model_name='moment',
            name='topic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.topicinfo', verbose_name='话题'),
        ),
        migrations.AddField(
            model_name='moment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_moment', to='api.userinfo', verbose_name='用户'),
        ),
        migrations.CreateModel(
            name='CommentRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=255, verbose_name='评论内容')),
                ('name', models.CharField(max_length=255, verbose_name='随机名字')),
                ('avatar', models.CharField(max_length=255, verbose_name='随机头像')),
                ('depth', models.PositiveIntegerField(default=1, verbose_name='评论深度')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='评论时间')),
                ('comment_status', models.SmallIntegerField(choices=[(0, '显示'), (1, '条件隐身')], default=0, verbose_name='评论状态')),
                ('favor_count', models.PositiveIntegerField(default=0, verbose_name='评论赞数')),
                ('moment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.moment', verbose_name='评论的瞬间')),
                ('reply', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replys', to='api.commentrecord', verbose_name='回复评论ID')),
                ('root', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roots', to='api.commentrecord', verbose_name='评论根ID')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userinfo', verbose_name='评论用户')),
            ],
            options={
                'verbose_name': '瞬间评论',
                'verbose_name_plural': '瞬间评论',
                'db_table': 'comment_record',
            },
        ),
        migrations.CreateModel(
            name='CommentFavorRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='评论被赞的时间')),
                ('commentRecord', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.commentrecord', verbose_name='被赞的评论')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.userinfo', verbose_name='赞评论的用户')),
            ],
            options={
                'verbose_name': '被赞评论的记录',
                'verbose_name_plural': '被赞评论的记录',
                'db_table': 'comment_favor_record',
            },
        ),
    ]
